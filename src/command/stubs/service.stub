<?php
namespace {%namespace%};

use app\system\service\Base;
use think\exception\ClassNotFoundException;

class {%className%} extends Base
{
   /**
    * 实例化logic
    * @param string $name
    * @param string $common
    * @return \app\{%moduleName%}\logic\{%className%}
    */
   public function logicInit($name = "{%className%}" , $common = 'common'){
       if (strpos($name, '/')) {
           list($module, $name) = explode('/', $name, 2);
           $class = "\\app\\$module\\logic\\$name";
       }else{
           $module = "{%moduleName%}";
           $class = "\\app\\$module\\logic\\$name";
       }
       if (class_exists($class)) {
           $model = new $class();
       } else {
           $class = str_replace('\\' . $module . '\\', '\\' . $common . '\\', $class);
           if (class_exists($class)) {
               $model = new $class();
           } else {
               throw new ClassNotFoundException('class not exists:' . $class, $class);
           }
       }
       return $model;
   }

   /**
    * 实例化validate
    * @param string $name
    * @param string $common
    * @return \app\{%moduleName%}\validate\{%className%}
    */
   public function validateInit($name = "{%className%}" , $common = 'common'){
       if (strpos($name, '/')) {
           list($module, $name) = explode('/', $name, 2);
           $class = "\\app\\$module\\validate\\$name";
       }else{
           $module = "{%moduleName%}";
           $class = "\\app\\$module\\validate\\$name";
       }
       if (class_exists($class)) {
           $model = new $class();
       } else {
           $class = str_replace('\\' . $module . '\\', '\\' . $common . '\\', $class);
           if (class_exists($class)) {
               $model = new $class();
           } else {
               throw new ClassNotFoundException('class not exists:' . $class, $class);
           }
       }
       return $model;
   }

    /**
     * 删除
     * @param array|integer|string $where 条件
     * @param bool $force false 软删除 true 真删除
     * @return integer
     */
    public function del($where, $force = false){
        $l = $this->logicInit();
        $result = $l->del($where,$force);
        if(false === $result){
            $this->error = $l->getError();
            return false;
        }
        return $result;
    }

   /**
    * 恢复软删除的数据
    * @param array|integer|string $where
    * @return integer
    */
   public function permit($where=[]){
       $l = $this->logicInit();
       $result = $l->permit($where);
       if(false === $result){
           $this->error = $l->getError();
           return false;
       }
       return true;
   }
}
